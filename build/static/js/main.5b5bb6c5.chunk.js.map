{"version":3,"sources":["components/Users/UserReducer.js","redux/rootReducer.js","redux/store.js","history.js","config/api.js","config/config.js","components/Users/UserActions.js","components/Users/UserContainerStyle.js","components/Users/UserContainer.js","components/Routes.js","serviceWorker.js","index.js"],"names":["initialState","loading","data","total","page","page_size","appReducer","combineReducers","USERREDUCER","state","arguments","length","undefined","action","type","Object","objectSpread","rootReducer","persistConfig","key","storage","storageSession","blackList","pReducer","persistReducer","store","createStore","applyMiddleware","thunk","redux_store","persistor","persistStore","history","createBrowserHistory","api","base_url_prod","base_url_dev","base_url_test","users","base_url","config","setUsers","setLoading","UserContainerWrapper","styled","div","_templateObject","confirm","Modal","UserContainer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","populateData","pageSize","getUsers","deleteItem","id","title","onOk","deleteUser","onCancel","showModal","columns","dataIndex","width","render","item","react_default","a","createElement","es_button","onClick","updateItem","first_item","card_component","card","employee_name","style","display","flexDirection","concat","employee_salary","employee_age","profile_image","icon","table","bordered","dataSource","pagination","current","onChange","showSizeChanger","onShowSizeChange","scroll","y","Component","mapDispatchToProps","per_page","dispatch","setPage","axios","get","then","response","catch","error","console","log","notification","message","description","duration","callback","delete","connect","Routes","Router","Switch","Route","path","component","Users","Boolean","window","location","hostname","match","ReactDOM","locale_provider","locale","enUS","es","configureStore","integration_react","components_Routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAAMA,EAAe,CACjBC,SAAS,EACTC,KAAM,GACNC,MAAO,EACPC,KAAM,EACNC,UAAW,ICFTC,EAAaC,YAAgB,CACjCC,YDIyB,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBV,EAAca,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAOC,EAAOC,MACV,IAAK,YACD,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIP,KAAMW,EAAOX,OAErB,IAAK,cACD,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIR,QAASY,EAAOX,OAExB,IAAK,YACD,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIN,MAAOU,EAAOX,OAEtB,IAAK,WACD,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIL,KAAMS,EAAOX,OAErB,IAAK,gBACD,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEIJ,UAAWQ,EAAOX,OAE1B,IAAK,qBACD,OAAOF,EACX,QACI,OAAOS,MC3BJQ,EAJK,SAACR,EAAOI,GAC1B,OAAOP,EAAWG,EAAOI,ICFrBK,EAAgB,CAClBC,IAAK,OACLC,QAAQC,IACRC,UAAU,IAGRC,EAAWC,YAAeN,EAAcD,GAE1CQ,EAAQC,YAAYH,EAASI,YAAgBC,MAGjCC,EAAA,CACZJ,QAAOK,UAHKC,YAAaN,8DCbhBO,EAAUC,sGCFjBC,EAAM,CAERC,cAAe,wBACfC,aAAc,wBACdC,cAAe,wBAEfC,MAAO,UAGXJ,EAAIK,SACkEL,EAAIE,aAE3DF,ICNAM,EAJA,CACXN,IDSWA,YEPFO,EAAW,SAACvC,GAAD,MAAW,CAC/BY,KAAM,YACNZ,SAaSwC,EAAa,SAACxC,GAAD,MAAW,CACjCY,KAAM,cACNZ,2OCpBG,IAAMyC,SAAuBC,EAAOC,IAAVC,KCI3BC,EAAUC,IAAMD,QAEhBE,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAApC,OAAAqC,EAAA,EAAArC,CAAAsC,KAAAJ,IACfE,EAAApC,OAAAuC,EAAA,EAAAvC,CAAAsC,KAAAtC,OAAAwC,EAAA,EAAAxC,CAAAkC,GAAAO,KAAAH,KAAMH,KAoBVO,aAAe,SAACrD,EAAMsD,GAClBP,EAAKD,MAAMS,SAASD,EAAUtD,IAtBf+C,EAyBnBS,WAAa,SAACC,GACVd,EAAQ,CACJe,MAAO,6CACPC,KAAM,WACJZ,EAAKD,MAAMc,WAAWH,EAAI,WACtBV,EAAKM,aAAaN,EAAKD,MAAM9C,KAAM+C,EAAKD,MAAM7C,cAGpD4D,SAAU,gBAjCCd,EAsCnBe,UAAY,aApCRf,EAAKgB,QAAU,CACX,CAAEL,MAAO,KAAMM,UAAW,KAAMjD,IAAK,KAAMkD,MAAO,KAClD,CAAEP,MAAO,OAAQM,UAAW,gBAAiBjD,IAAK,gBAAiBkD,MAAO,KAC1E,CAAEP,MAAO,SAAUM,UAAW,kBAAmBjD,IAAK,kBAAmBkD,MAAO,IAChF,CAAEP,MAAO,MAAOM,UAAW,eAAgBjD,IAAK,eAAgBkD,MAAO,IACvE,CAAEP,MAAO,gBAAiBM,UAAW,gBAAiBjD,IAAK,gBAAiBkD,MAAO,IACnF,CAAEP,MAAO,OAAQM,UAAW,GAAIE,OAAQ,SAACC,GAAD,OACpCC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ7D,KAAK,UAAU8D,QAAS,WAAOzB,EAAK0B,WAAWN,KAAvD,SACJF,MAAO,KACP,CAAEP,MAAO,SAAUM,UAAW,GAAIE,OAAQ,SAACC,GAAD,OACtCC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQ7D,KAAK,SAAS8D,QAAS,WAAOzB,EAAKS,WAAWW,EAAKV,MAA3D,WACJQ,MAAO,MAbIlB,mFAkBfE,KAAKI,aAAaJ,KAAKH,MAAM9C,KAAM,qCAyBnC,IAAI0E,EAAazB,KAAKH,MAAMZ,OAASe,KAAKH,MAAMZ,MAAM3B,OAAS0C,KAAKH,MAAMZ,MAAM,GAAK,KAEjFyC,EAAiBD,EACrBN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMlB,MAAOgB,EAAWG,eACpBT,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAACC,QAAS,OAAQC,cAAe,WACzCZ,EAAAC,EAAAC,cAAA,6BAAAW,OAAwBP,EAAWjB,KACnCW,EAAAC,EAAAC,cAAA,+BAAAW,OAA0BP,EAAWG,gBACrCT,EAAAC,EAAAC,cAAA,iCAAAW,OAA4BP,EAAWQ,kBACvCd,EAAAC,EAAAC,cAAA,8BAAAW,OAAyBP,EAAWS,eACpCf,EAAAC,EAAAC,cAAA,+BAAAW,OAA0BP,EAAWU,kBAEnC,KAEV,OACKnC,KAAKH,MAAMjD,QASZuE,EAAAC,EAAAC,cAAC/B,EAAD,KACI6B,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAM3E,KAAK,aATf0D,EAAAC,EAAAC,cAAC/B,EAAD,KACKoC,EACDP,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,UAAQ,EAACxB,QAASd,KAAKc,QAASyB,WAAYvC,KAAKH,MAAMZ,MAC9DuD,WAAY,CAACC,QAASzC,KAAKH,MAAM9C,KAAMD,MAAOkD,KAAKH,MAAM/C,MAAOuD,SAAUL,KAAKH,MAAM7C,UACrF0F,SAAU1C,KAAKI,aAAcuC,iBAAiB,EAAMC,iBAAkB5C,KAAKI,cAC3EyC,OAAQ,CAAEC,EAAG,eAjEDC,aAqF5B,IAAMC,EAAqB,CACvB1C,SFhEoB,SAAC2C,EAAUlG,GAC/B,OAAO,SAASmG,GACZA,EAAS7D,GAAW,IACpB6D,EAR8B,CAClCzF,KAAM,gBACNZ,KAMyBoG,IACrBC,EAxBe,SAACrG,GAAD,MAAW,CAC9BY,KAAM,WACNZ,QAsBasG,CAAQpG,IACjBqG,IAAMC,IAAN,GAAArB,OAAa7C,EAAON,IAAIE,cAAxBiD,OAAuC7C,EAAON,IAAII,MAAlD,cAAA+C,OAAoEiB,EAApE,UAAAjB,OAAqFjF,IACpFuG,KAAK,SAAAC,GACFL,EAAS7D,GAAW,IACpB6D,EAvBuB,CAC/BzF,KAAM,YACNZ,KAqB0B0G,EAAS1G,KAAKC,QAChCoG,EAAS9D,EAASmE,EAAS1G,KAAKA,SACjC2G,MAAM,SAAAC,GACLP,EAAS7D,GAAW,IACpB6D,EAAS9D,EAAS,KAClBsE,QAAQC,IAAIF,GACZG,IAAaH,MAAM,CACfI,QAAS,SACTC,YAAa,yBACbC,SAAU,QEgDtBpD,WF1CsB,SAACH,EAAIwD,GAC3B,OAAO,SAASd,GACZE,IAAMa,OAAN,GAAAjC,OAAgB7C,EAAON,IAAIE,cAA3BiD,OAA0C7C,EAAON,IAAII,MAArD,KAAA+C,OAA8DxB,IAC7D8C,KAAK,SAAAC,GACFS,MACDR,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZG,IAAaH,MAAM,CACfI,QAAS,SACTC,YAAa,yBACbC,SAAU,SEmCXG,cAff,SAAyB9G,GACrB,MAAO,CACH6B,MAAO7B,EAAMD,YAAYN,KACzBD,QAASQ,EAAMD,YAAYP,QAC3BE,MAAOM,EAAMD,YAAYL,MACzBC,KAAMK,EAAMD,YAAYJ,KACxBC,UAAWI,EAAMD,YAAYH,YASGgG,EAAzBkB,CAA6CtE,GChF7CuE,oLAVX,OACEhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAQzF,QAASA,GACfwC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWC,aANhB1B,aCOD2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAAS9D,OACLE,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAgBC,OAAQC,KACpB/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAU/G,MAAOgH,EAAehH,OAC5B+C,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAazI,QAAS,KAAM6B,UAAW2G,EAAe3G,WAClD0C,EAAAC,EAAAC,cAACiE,GAAD,SAGOC,SAASC,eAAe,SDwGzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.5b5bb6c5.chunk.js","sourcesContent":["const initialState = {\n    loading: false,\n    data: [],\n    total: 0,\n    page: 1,\n    page_size: 10\n}\n\nexport const USERREDUCER = (state = initialState, action) => {\n    switch(action.type) {\n        case 'SET_USERS':\n            return {\n                ...state,\n                data: action.data\n            }\n        case 'SET_LOADING':\n            return {\n                ...state,\n                loading: action.data\n            }\n        case 'SET_TOTAL':\n            return {\n                ...state,\n                total: action.data\n            }\n        case 'SET_PAGE':\n            return {\n                ...state,\n                page: action.data\n            }\n        case 'SET_PAGE_SIZE':\n            return {\n                ...state,\n                page_size: action.data\n            }\n        case 'RESET_USER_REDUCER':\n            return initialState;\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport { USERREDUCER } from '../components/Users/UserReducer';\n\nconst appReducer = combineReducers({\n  USERREDUCER\n});\n\nconst rootReducer = (state, action) => {\n  return appReducer(state, action)\n}\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storageSession from 'redux-persist/lib/storage/session';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst persistConfig = {\n    key: 'root',\n    storage:storageSession,\n    blackList:[]\n}\n\nconst pReducer = persistReducer(persistConfig,rootReducer);\n\nlet store = createStore(pReducer,applyMiddleware(thunk));\nlet persistor = persistStore(store);\n\nexport default  {\n    store, persistor\n}","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","const api = {\n    // External URLs to query\n    base_url_prod: 'http://localhost:7000',\n    base_url_dev: 'http://localhost:7000',\n    base_url_test: 'http://localhost:7000',\n\n    users: '/users'\n}\n\napi.base_url = process.env.NODE_ENV === 'PRODUCTION' ? api.base_url_prod : \n                process.env.NODE_ENV === 'TEST' ? api.base_url_test : api.base_url_dev;\n                \nexport default api;","import api from './api';\n\nconst config = {\n    api: api,\n}\n\nexport default config;","import axios from 'axios';\nimport config from '../../config/config';\n\nimport { notification } from 'antd';\n\nexport const setUsers = (data) => ({\n    type: 'SET_USERS',\n    data\n});\n\nexport const setPage = (data) => ({\n    type: 'SET_PAGE',\n    data\n});\n\nexport const setTotal = (data) => ({\n    type: 'SET_TOTAL',\n    data\n});\n\nexport const setLoading = (data) => ({\n    type: 'SET_LOADING',\n    data\n});\n\nexport const setPageSize = (data) => ({\n    type: 'SET_PAGE_SIZE',\n    data\n});\n\nexport const getUsers = (per_page, page) => {\n    return function(dispatch) {\n        dispatch(setLoading(true));\n        dispatch(setPageSize(per_page));\n        dispatch(setPage(page));\n        axios.get(`${config.api.base_url_dev}${config.api.users}?per_page=${per_page}&page=${page}`)\n        .then(response => {\n            dispatch(setLoading(false));\n            dispatch(setTotal(response.data.total));\n            dispatch(setUsers(response.data.data));\n        }).catch(error => {\n            dispatch(setLoading(false));\n            dispatch(setUsers([]));\n            console.log(error);\n            notification.error({\n                message: 'Error!',\n                description: 'Unable to fetch users!',\n                duration: 2\n            })\n        });\n    }\n}\n\nexport const deleteUser = (id, callback) => {\n    return function(dispatch) {\n        axios.delete(`${config.api.base_url_dev}${config.api.users}/${id}`)\n        .then(response => {\n            callback();\n        }).catch(error => {\n            console.log(error);\n            notification.error({\n                message: 'Error!',\n                description: 'Unable to delete user!',\n                duration: 2\n            })\n        });\n    }\n}\n","import styled from 'styled-components';\n\nexport const UserContainerWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    height: 100%;\n    font-size: 50px;\n`","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Button, Icon, Card, Modal } from 'antd';\nimport { getUsers, deleteUser } from './UserActions';\nimport { UserContainerWrapper } from './UserContainerStyle';\n\nconst confirm = Modal.confirm;\n\nclass UserContainer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.columns = [\n            { title: 'ID', dataIndex: 'id', key: 'id', width: 100},\n            { title: 'Name', dataIndex: 'employee_name', key: 'employee_name', width: 150},\n            { title: 'Salary', dataIndex: 'employee_salary', key: 'employee_salary', width: 50 },\n            { title: 'Age', dataIndex: 'employee_age', key: 'employee_age', width: 50 },\n            { title: 'Profile Image', dataIndex: 'profile_image', key: 'profile_image', width: 50 },            \n            { title: 'Edit', dataIndex: '', render: (item) => \n                <Button type=\"primary\" onClick={() => {this.updateItem(item)}}>Edit</Button>,\n            width: 100},\n            { title: 'Delete', dataIndex: '', render: (item) => \n                <Button type=\"danger\" onClick={() => {this.deleteItem(item.id)}}>Delete</Button>,\n            width: 100},\n        ];\n    }\n    \n    componentDidMount() {\n        this.populateData(this.props.page, 10);\n    }\n\n    populateData = (page, pageSize) => {\n        this.props.getUsers(pageSize, page);\n    }\n\n    deleteItem = (id) => {\n        confirm({\n            title: 'Are you sure you want to delete this user?',\n            onOk: () => {\n              this.props.deleteUser(id, () => {\n                  this.populateData(this.props.page, this.props.page_size);\n              });\n            },\n            onCancel: () => {\n            }\n        });\n    }\n\n    showModal = () => {\n\n    }\n\n    render() {\n        let first_item = this.props.users && this.props.users.length ? this.props.users[0] : null;\n\n        let card_component = first_item ? \n        <Card title={first_item.employee_name}>\n            <div style={{display: 'flex', flexDirection: 'column'}}>\n                <span>{`Employee ID : ${first_item.id}`}</span>\n                <span>{`Employee Name : ${first_item.employee_name}`}</span>\n                <span>{`Employee Salary : ${first_item.employee_salary}`}</span>\n                <span>{`Employee Age : ${first_item.employee_age}`}</span>\n                <span>{`Profile Image : ${first_item.profile_image}`}</span>\n            </div>\n        </Card> : null;\n\n        return (\n            !this.props.loading ?\n            <UserContainerWrapper>\n                {card_component}\n                <Table bordered columns={this.columns} dataSource={this.props.users}\n                pagination={{current: this.props.page, total: this.props.total, pageSize: this.props.page_size,\n                onChange: this.populateData, showSizeChanger: true, onShowSizeChange: this.populateData}}\n                scroll={{ y: 240 }} />\n            </UserContainerWrapper>\n            :\n            <UserContainerWrapper>\n                <Icon type=\"loading\"/>\n            </UserContainerWrapper>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.USERREDUCER.data,\n        loading: state.USERREDUCER.loading,\n        total: state.USERREDUCER.total,\n        page: state.USERREDUCER.page,\n        page_size: state.USERREDUCER.page_size\n    }\n}\n\nconst mapDispatchToProps = {\n    getUsers,\n    deleteUser\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserContainer);","import React, { Component } from 'react';\nimport { history } from '../history';\nimport { Router, Switch, Route } from 'react-router-dom';\nimport Users from './Users/UserContainer';\n\nclass Routes extends Component {\n\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route path='/' component={Users} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Base react set up\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Locale set up from AntD\nimport { LocaleProvider } from 'antd';\nimport enUS from 'antd/lib/locale-provider/en_US';\n\n// Persist and thunk middleware setup\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport Routes from './components/Routes';\n\n// Service worker. Currently not used.\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <LocaleProvider locale={enUS}>\n        <Provider store={configureStore.store}>\n            <PersistGate loading={null} persistor={configureStore.persistor}>\n                <Routes />\n            </PersistGate>\n        </Provider>\n    </LocaleProvider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}